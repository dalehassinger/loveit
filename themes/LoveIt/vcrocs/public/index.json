[{"categories":["Automation"],"content":"How to setup and configure your VMware Aria Automation environment to work with Ansible. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:0:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"1 Use Case I was recently asked how the VMware Aria Automation | Ansible Integration worked. I never used Ansible before so I thought this would be great time to learn Ansible and demo the integration with VMware Aria Automation. If you look at some of my previous blog posts I wrote about SaltStack Config a lot. I thought this would be a good time for myself to learn Ansible and compare the two products. When I started reading about the VMware Aria Automation and Ansible Integration, I didn’t find a single blog post or article that covered everything from installing Ansible to creating a new Server Build in Aria Automation. I am going to document all the steps that it took for me to do a complete Aria Automation | Ansible integration. I hope that someone will find this blog post useful on their Automation journey. A lot of people that write about Ansible use it with Red Hat Linux. For my demo environment, I chose to use Rocky Linux so that I don’t need to worry about any Red Hat licenses. Some people online recommend using Rocky Linux to replace CentOS. Sometimes it seems that the version of Linux you choose and what product to you use for Automation and Config management can be almost a religious debate. This blog post is to cover a specific use case. How to use VMware Aria Automation | Ansible Integration. Use whatever version of Linux you want. The details that I write about may need to be modified slightly if you use a different version of Linux. This blog post will at least give you the framework to get started. When I wrote this Blog Post I was using VMware Aria Automation version 8.10.2, Ansible 2.13.3 and Rocky Linux 9. To use the details in this blog post you will need a working install of VMware Aria Automation. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:1:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"2 Create a Ansible Control Server and install Ansible: Create a new Server. I created a clean Rocky Linux VM. This server will be used as the Ansible Control Node. Steps to install Ansible: # Step 1 | Install Rocky Linux EPEL repository dnf install epel-release -y # Step 2 | Install Ansible dnf install ansible -y # Check Ansible Version after Install ansible --version Results from ansible –version: ansible [core 2.13.3] config file = /etc/ansible/ansible.cfg configured module search path = ['/root/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules'] ansible python module location = /usr/lib/python3.9/site-packages/ansible ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections executable location = /usr/bin/ansible python version = 3.9.14 (main, Nov 7 2022, 00:00:00) [GCC 11.3.1 20220421 (Red Hat 11.3.1-2)] jinja version = 3.1.2 libyaml = True Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:2:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"3 Edit the hosts file: Edit the /etc/ansible/hosts file: I like to use nano to edit files. To save file changes in Nano use cntrl-o. To exit Nano use cntrl-x. # the cmd at the cli to edit the hosts file nano /etc/ansible/hosts This is the contents of the /etc/ansible/hosts file: [rocky] 192.168.110.201 [rocky:vars] ansible_user=root ansible_password='VMware1!' Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:3:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"4 Edit the ansible.cfg file: Edit the /etc/ansible/ansible.cfg file: # the cmd at the cli to edit the ansible.cfg file nano /etc/ansible/ansible.cfg This is the minium contents of the /etc/ansible/ansible.cfg file: BOTH of these lines MUST be in the ansible.cfg file to add Ansible to VMware Aria Automation. If they are not present, adding the Integration will fail! The vault password file can be named something different, BUT IT MUST BE SPECIFIED! [defaults] host_key_checking = False vault_password_file = /etc/ansible/vault-pass.txt Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:4:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"5 Test Ansible Install To test the Ansible install you can do a ping: # the cmd at the cli to run a ping ansible rocky -m ping Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:5:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"6 VMware Aria Automation Configuration Add Ansible Integration to VMware Aria Automation: Click to see Larger Image of Screen Shot You need to specify the Inventory File path. Default is /etc/ansible/hosts You need to make sure the /etc/ansible/ansible.cfg file has the following two lines of code to add as an VMware Aria Automation Integration. ansible.cfg file: [defaults] host_key_checking = False vault_password_file = /etc/ansible/vault-pass.txt Ansible Integration screen: Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:6:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"7 VMware Aria Automation Cloud Template Add Ansible to Cloud Template Click to see Larger Image of Screen Shot Cloud Template YAML code # Cloud Template using Ansible Integration formatVersion: 1 inputs: CustomizationSpec: type: string description: Customization Specification default: ubuntu title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 12 default: VCROCS-001 IP: type: string default: 192.168.110.200 ServerGroups: type: string title: ServerGroups description: Ansible Server Groups default: rocky enum: - rocky - WebServers - AppServers - DBServers PlayBooks: type: string title: PlayBooks description: Ansible PlayBooks default: web-server-rocky enum: - web-server-rocky - rocky-web - rocky-db resources: Cloud_Ansible_1: type: Cloud.Ansible properties: host: ${resource.Cloud_Machine_1.*} osType: linux account: rocky-ansible username: root password: VMware1! groups: - ${input.ServerGroups} playbooks: provision: - ${\"/etc/ansible/\" + input.PlayBooks + \".yml\" } Cloud_Network_1: type: Cloud.Network properties: networkType: existing constraints: - tag: network:VMs Cloud_Machine_1: type: Cloud.Machine properties: image: rocky flavor: small name: ${input.VMName} customizationSpec: ${input.CustomizationSpec} constraints: - tag: env:VMs networks: - network: ${resource.Cloud_Network_1.id} assignment: static address: ${input.IP} Example Ansible Playbook Creates a txt file, adds text to txt file, installs web server, starts web server service, enables cockpit, installs git, and does a git pull request from GitHub to copy web site files to new server. # web-server-rocky.yml - hosts: rocky name: Ansible Playbook to Install Web Server tasks: - name: Create a new txt file | web-server.txt file: path: /root/web-server.txt state: touch - name: Add a line of text to txt file | web-server.txt lineinfile: path: /root/web-server.txt line: \"vRA created this VM and used Ansible to create and modify this txt file | web-server.txt\" - name: Install Apache web server dnf: name: httpd state: latest - name: Ensure HTTP server is running service: name: httpd state: started - name: Run systemctl enable --now cockpit.socket command shell: systemctl enable --now cockpit.socket - name: Install Git dnf: name: git state: latest - name: Github Pull request of www.vCROCS.info ansible.builtin.git: repo: https://github.com/dalehassinger/Blog.git dest: /var/www/html single_branch: yes version: master VMware Aria Automation Service Broker Catalog: Click to see Larger Image of Screen Shot VMware Aria Automation Service Broker Request You can make the Ansible Server Group and Playbooks a dropdown with the custom form. The code to do this is within the YAML code of the Cloud Template. Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:7:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"8 Lessons Learned Lessons Learned: The VMware Aria Automation | Ansible Integration works well if you follow all the configuration steps. Ansible installation is very easy when you follow the directions. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:8:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"9 Helpful Links VMware Aria Automation | Ansible Links I found to be very helpful: Red Hat Ansible Web Site Deeper look at the vRealize Automation and Ansible Open Source Integration Configure Ansible Open Source integration in Cloud Assembly Info When I write about VMware Aria Automation I always say there are many ways to accomplish the same task. Ansible is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Ansible. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:9:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["APPS"],"content":"APPs that I use everyday to be Productive | 2022 If you have any APPs that you like better than I have listed please send them my way. I am always open to looking at new APPs. If you would ever want to see how I use these APPs reach out! I can do a demo. ","date":"2022-11-26","objectID":"/hugo-loveit/productive-apps-2022/:0:0","tags":["MAC","Apple","APPs"],"title":"Productive APPs | 2022","uri":"/hugo-loveit/productive-apps-2022/"},{"categories":["APPS"],"content":"1 Recent APPs Here are some APPs that I started using recently to be productive: Recent APPs: TickTick | To-Do and Notes App in one. CleanShot X | Screen Shot and Screen recording App mmhmm | Makes on-screen meetings and presentations a little more fun. ","date":"2022-11-26","objectID":"/hugo-loveit/productive-apps-2022/:1:0","tags":["MAC","Apple","APPs"],"title":"Productive APPs | 2022","uri":"/hugo-loveit/productive-apps-2022/"},{"categories":["APPS"],"content":"2 Proven APPs Here are some APPs that I have been using Daily for work or Blogging for awhile. They have proven their place in my workflows: Proven APPs: Visual Studio Code | Creating Code Github Desktop Affinity Photo | Photo editing VMware Fusion Termius | SSH Client Forklift | SFTP Client Slack Zoom | Online Meetings, Chat, etc… Hugo | The world’s fastest framework for building websites Microsoft Teams | Online Meetings, Chat, etc… Microsoft Office | Word, Excel, Outlook, Powerpoint, OneNote Backblaze | Online Backup to keep all my important files offsite. Dashlane | Password Manager BetterSnapTool | easily manage your window positions Raindrop.io | All-in-one bookmark manager ","date":"2022-11-26","objectID":"/hugo-loveit/productive-apps-2022/:2:0","tags":["MAC","Apple","APPs"],"title":"Productive APPs | 2022","uri":"/hugo-loveit/productive-apps-2022/"},{"categories":["Career"],"content":"New Job | August 2022 | Technical Account Manager (TAM) On August 1, 2022 I became an employee of VMware as a Technical Account Manager, TAM. I was hired to be a TAM with a focus on the vRealize Suite. Within a month of my hire date VMware announced VMware Aria. So now I am a TAM with a focus on the VMware Aria Product. To work for VMware was a career goal of mine. I was always impressed by the VMware employees that I worked with the past 10+ years. Everyone was always very professional and had a great attitude to help their customers. I wanted to know personally what it was like to work in that type of culture. If you know me you know that I have a passion for the VMware Aria suite of Products. So to be a TAM with a focus on Aria is a good fit for me. After several months at VMware, this is what I learned. The culture overall is very positive. A lot of people helped me in my on-boarding and wanted to see me be successful. People that I knew before I joined VMware reached out to me and said “What can I do to help you”. The employee benefits are the best that I ever had in my career so far. You get to do a lot of training to keep your skills up to date and at a level the customers expect. The on-boarding process can take days, weeks, months… To get started I received a laptop of my choice 3 days before my start date. Never experienced that before. Having a Mentor at VMware is very important. Someone that wants to help you be successful and will take the time to show you how to do your job, recommend training, help you pick benefits, let you know about different programs to get involved with, let you know about weekly zoom training sessions, help you get a lab setup, etc… VMware wants all employees to give back by making donations to non-profits, 100% match by VMware. VMware wants all employees to donate time to non-profits. Special thanks to some people that went above and beyond when I started at VMware to help me, in no particular order: Marshall Cline, Ariel Sanchez, Brock Peterson, Cosmin Trif, Christopher Kusek, Anton Wesztergom, Alex Musicante, Chad Thomas, David Kruse, Steve Lieberson, Paul Schlosser, Christina Griffus and some I may have missed. Now that I am getting more engaged with the customers that I will be working with, I plan to start blogging more again to continue giving back to the vCommunity. Share the knowledge! If anyone that reads my blogs would ever want to talk to me about being a VMware employee, please reach out to me. I will share my experience 1:1. Another area that I want to give back to the vCommunity is to help Mentor others. If anyone wants to ever talk, please reach out. ","date":"2022-11-01","objectID":"/hugo-loveit/2nd-half-2022/:0:0","tags":["VMware","Culture","Benefits","vExpert"],"title":"What have I been up to? | 2nd half 2022","uri":"/hugo-loveit/2nd-half-2022/"},{"categories":["VMUG"],"content":"VMware Explore 2022 | San Francisco VMware Explore is always one of the premiere Technology Events every year. Here is a collection of links and tips to some of the activities that I would attend and enjoy. I always tried to attend the Keynotes to learn about new product announcements and to hear the direction that VMware was going. I attended a lot of sessions. See list of sessions that I would enjoy. I would do Hands on Labs that were not available to do anytime. There are some HOLs that are available only during the conference and there are VMware people to help you with the labs. If you are a TAM customer, there are sessions dedicated to TAM customers. Go to the Expo Area. You can always talk to VMware Engineers at the booths in the Expo Area and watch demos. A lot of Vendors in the Expo Area. I would allows attend some of the vBrownbag Tech Talks. The Tech Talks were a 10 - 15 minute presentation. Watch for Vendor Parties. They are always fun and drinks | food are always free. The Veeam party in the past was always one of the better parties. See a McLaren F1 car in person, experience the speed of F1 in a fun simulator and learn how VMware helps McLaren F1 accelerate innovation. Click to see Larger Image VMware Explore Sessions: Login to VMware Explore 2022 before clicking on session links. (Click Here) Agenda: VMware Explore Agenda Speakers: William Lam | Cloud Infrastructure Business Group Vincent Riccio | Cloud Management Business Unit Chris McClanahan | Cloud Management Business Unit Ariel Sanchez | One of the most accomplished TAMs you will meet. A mentor to many people in TECH John Nicholson | Storage and Availability Business Unit Sam McGeown | Technical Marketing team for Cloud Automation John Dias | Cloud Management solutions Amanda Blevins | Vice President and Chief Technology Officer for the Americas Kyle Ruddy | Senior Technical Product Marketing Manager for HashiCorp Graham Lockard | IT Infrastructure Manager | Penn State University | SaaS with Horizon Topics: SaltStack PowerCLI PowerShell | More sessions this year than I have seen in the past. VMware {code} vRealize Automation vRealize Operations vRealize Orchestrator vRealize Log Insight Virtually Speaking Podcast Live vSAN vSphere DevOps Sessions: VMware Explore | Twitter ","date":"2022-08-24","objectID":"/hugo-loveit/centra-pa-vmug-08-2022/:0:0","tags":["VMware","VMware Explore","VMWorld","vExpert","vCommunity"],"title":"Central PA VMUG | August 2022","uri":"/hugo-loveit/centra-pa-vmug-08-2022/"},{"categories":["PowerBlock"],"content":"VMware PowerBlock | August 2022 The August PowerBlock is absolutely going to be a well attended event. We are gong to have an all-star lineup, of highly qualified automation engineers, including Ariel Sanchez, Tom Gillaspy, Chris McClanahan, Dale Hassinger and our powerblock discussing a variety of topics. Here is the general outline for the conversation: How do you get started with automation? What does success look like? What are some of the common mistakes / misperceptions when getting started with automation? What are some examples of customer success using vRealize Automation? Why Automate? How to get started? What does success look like? What are some common mistakes / misperception’s Examples of customer success ","date":"2022-08-19","objectID":"/hugo-loveit/vmware-powerblock-08-2022/:0:0","tags":["VMware","PowerBlock","Automation","vRA","vRealize Automation"],"title":"VMware PowerBlock | August 2022","uri":"/hugo-loveit/vmware-powerblock-08-2022/"},{"categories":["Automation"],"content":"Using SaltStack Config api for Automation from vRA Catalog or cmd A personal goal of mine for 2022 was to start doing more with Python when working with VMware SaltStack Config. As a Windows Admin most of my automation was done with PowerShell. All the examples you see in the salt documentation are written in Python, so to use Python for some processes makes sense. I had a use case that made sense to use Python. I want to schedule reboots of AWS EC2 instances using SaltStack Config. For Servers that are on-prem I would always automate the process to create a server reboot scheduled task in vCenter. With AWS I want to use VMware SaltStack Config to schedule the Server Reboot. Manual Steps: Create a SaltStack Config Job to do the reboot. I create a job named “vRA | Server Reboot”. This job will be used for all scheduled server reboots. Copy the Python Code below and create a ScheduleServerReboot.py file that will be copied to the SSC server. The Python Code completes the following steps: Creates a Target that uses the grain “id” and will only target the Server that you want to reboot. Creates a Run Once Schedule to use the job and new target that was created. Sends an email to show that the run once schedule to reboot server was created. SaltStack Config Server: My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS. Python Code: # --- Python Code --- # --- In my code I show the Password. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code. # --- Use what works best in your environment. # example to run the script # python3 /scripts/ScheduleServerReboot.py -name '2019DC' -dateTime '2022-06-25T23:00' import argparse import pprint import json from datetime import datetime from datetime import timedelta import random import smtplib, ssl from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart # --- Generate a random ID number randomNumber = random.randint(0,1000) randomNumber = '0000' + str(randomNumber) randomNumber = randomNumber[-4:] print('ID:',randomNumber) # --- parse arguments parser = argparse.ArgumentParser(description=\"Create Targets\", formatter_class=argparse.ArgumentDefaultsHelpFormatter) parser.add_argument(\"-name\", help=\"Target Name\") parser.add_argument(\"-dateTime\", help=\"Schedule Date | Time\") args = vars(parser.parse_args()) # --- Set up variables argName = args[\"name\"] argDateTime = args[\"dateTime\"] argDate = argDateTime[0:10] # --- Print the variables print('Server Name: ',argName) print('Date | Time: ',argDateTime) # --- Connect to SSC Server host = 'https://192.168.86.110' user = 'root' password = 'HackMe!' from sseapiclient.tornado import SyncClient client = SyncClient.connect(host, user, password, ssl_validate_cert=False) # --- Check to make sure minion exists minionName = '' minionReturn = client.api.minions.get_minion_presence(minion_id = argName) #print(targetReturn) for x in minionReturn.ret['results']: #print(x) minionName = x['minion'] print('minionName:', minionName) if minionName == '': print('Minion not found!') minionExists = 'false' else: print('Minion found!') minionExists = 'true' # --- Create Target ID | Name targetID = 'id:' + argName targetName = \"vRA | Reboot | \" + argName + ' | ' + argDate + ' | ID:' + randomNumber print('Target ID:',targetID) print('Target Name:',targetName) # --- Create New SSC Target client.api.tgt.save_target_group(tgt={'*': {'tgt_type': 'grain', 'tgt':targetID}}, name=targetName) # --- Get UUID of new Target Created targetReturn = client.api.tgt.get_target_group(name=targetName) for x in targetReturn.ret['results']: #print(x) targetUUID = x['uuid'] print('Target UUID:', targetUUID) # --- Get UUID of Job to run in Schedule #jobReturn=client.api.job.get_jobs() jobName = 'vRA | Server Reboot' print('Job Name: ',jobName) jobReturn = client.api.job.get_jobs(name=jobName) for x in jobReturn.ret['results']: #print(x) jobUUID = x['uuid'] print","date":"2022-06-26","objectID":"/hugo-loveit/saltstack-config-api/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","Python","salt-api"],"title":"VMware vRealize SaltStack Config API","uri":"/hugo-loveit/saltstack-config-api/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 9: Using salt-api with PowerShell for Windows Server Automation This post is to show how to use PowerShell to make RESTful API calls to SaltStack Config. This is something that I have wanted to do for awhile. I could never find any examples in my Google searches, so I took the time to learn how the examples that use curl work and translated that into PowerShell Code. I hope some Windows Server Admins will find this post helpful. I like using salt to do Windows Server Configuration Management more than remote PowerShell. You can run changes against many servers at the exact same time instead of looping thru a list of servers names. I am also going to look at use salt-api with vRealize Automation ABX action scripts. In some previous posts I used the POSH-SSH module but when you use the salt-api, the PowerShell Module POSH-SSH is no longer needed. Configuration Changes to the SaltStack Config Server: My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS. The following steps are what I needed to do in my Lab environment from the SSC CLI to enable salt-api: * Always make sure you have a good snap | backup before making any changes to SSC Server Install CherryPy: pip3 install cherrypy Install the PyOpenSSL package: pip3 install pyopenssl Generate a self-signed certificate: salt-call --local tls.create_self_signed_cert open firewall port 8000: iptables -A INPUT -i eth0 -p tcp --dport 8000 -j ACCEPT Edit /etc/salt/master file: vi /etc/salt/master Add these lines to the /etc/salt/master file: external_auth: pam: root: - .* rest_cherrypy: port: 8000 ssl_crt: /etc/pki/tls/certs/localhost.crt ssl_key: /etc/pki/tls/certs/localhost.key Restart salt-master and check service status for any errors: systemctl restart salt-master systemctl status salt-master Enable | Start salt-api and check service status for any errors: systemctl enable salt-api systemctl start salt-api systemctl status salt-api Tests to make sure SaltStack Config Changes are working: I did all this PowerShell code from my mac. To use self-signed certs I use -SkipCertificateCheck. On a Windows OS the code is different. # --- PowerShell Code --- Invoke-WebRequest -Uri 'https://192.168.86.141:8000' -SkipCertificateCheck Results: StatusCode : 200 StatusDescription : OK Content : {\"return\": \"Welcome\", \"clients\": [\"local\", \"local_async\", \"local_batch\", \"local_subset\", \"runner\", \"runner_async\", \"ssh\", \"wheel\", \"wheel_async\"]} RawContent : HTTP/1.1 200 OK Server: CherryPy/8.9.1 Date: Sat, 11 Jun 2022 20:57:46 GMT Access-Control-Allow-Origin: * Access-Control-Expose-Headers: GET, POST Access-Control-Allow-Credentials: true Vary: Accept-E… Headers : {[Server, System.String[]], [Date, System.String[]], [Access-Control-Allow-Origin, System.String[]], [Access-Control-Expose-Headers, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 146 RelationLink : {} Make sure you see StatusCode: 200 Next step is to make sure you get a token: # --- PowerShell Code --- # --- In my code I show the PassWord. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code. # --- Use what works best in your environment. $saltServerAddress = 'https://192.168.86.110:8000' # --- Set the json body $body = '{ \"username\": \"root\",\"password\": \"HackMe!\",\"eauth\": \"pam\"}' # --- Fetch New Token from salt master $url = \"$saltServerAddress/login\" $Params = @{ Method = \"Post\" Uri = $url Body = $Body ContentType = \"application/json\" } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck $fetch $fetch.return.token Results: return ------ {@{token=6696846c802f78d5326a69b79d36e95015d37f5a; expire=1655025071.22838; start=1654981871.22838; user=root; eauth=pam; perms=System.Object[]}} 6696846c802f78d5326a69b79d36e95015d37f5a You will see “token=” in the return data PowerShell API Code Examples: Run a test.ping # --- PowerShell Code --- $minionName = '2019DC' $saltServerAddress = 'https://192.168","date":"2022-06-10","objectID":"/hugo-loveit/saltstack-config-part-09/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","Salt API"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 9","uri":"/hugo-loveit/saltstack-config-part-09/"},{"categories":["Automation"],"content":"Salt functions that I find myself using the most. I have been using VMware vRealize SaltStack Config for several months and I thought I would share and create my own cheat sheet to show which functions I use the most as a Windows Server admin and how to format the syntax. I still feel that I barely use all the capabilities that salt has to offer. SaltStack Config is a very Powerful tool to have available for anyone that has a vRealize Suite License. As a Windows Server admin don’t be afraid of salt because you feel it was made for Linux admins. That is NOT the case. I will be managing all Windows Server in my environment with salt. That includes VMs in vCenter and cloud native Azure VMs. This cheat sheet will be updated often to show examples as my journey into the salt world continues. Check back often. Link to salt module Documentation Ping - Make sure server responds: \u003e Command: salt \"vCROCS01\" test.ping OR salt \"*\" test.ping OR salt \"vC*\" test.ping \u003e Results: vCROCS01: True \u003e Command using --output=json: salt \"vCROCS01\" test.ping --output=json \u003e Results: { \"vCROCS01\": true } Windows Disk Usage: \u003e Command: salt \"vCROCS01\" disk.usage \u003e Results: vCROCS01: ---------- C:\\: ---------- 1K-blocks: 67642364.0 available: 15229492.0 capacity: 77% filesystem: C:\\ used: 52412872.0 E:\\: ---------- 1K-blocks: 41809856.0 available: 38486208.0 capacity: 8% filesystem: E:\\ used: 3323648.0 \u003e Command: salt \"vCROCS01\" disk.usage --output=json \u003e Results: { \"vCROCS01\": { \"C:\\\\\": { \"filesystem\": \"C:\\\\\", \"1K-blocks\": 67642364.0, \"used\": 52424392.0, \"available\": 15217972.0, \"capacity\": \"78%\" }, \"E:\\\\\": { \"filesystem\": \"E:\\\\\", \"1K-blocks\": 41809856.0, \"used\": 3323648.0, \"available\": 38486208.0, \"capacity\": \"8%\" } } } Windows Services: \u003e Command stop a Windows Service: salt \"vCROCS01\" service.stop \"spooler\" \u003e Results: vCROCS01: True \u003e Command disable a Windows Service: salt \"vCROCS01\" service.disable \"spooler\" \u003e Results: vCROCS01: True \u003e Command get status of a Windows Service: salt \"vCROCS01\" service.status \"spooler\" \u003e Results: vCROCS01: False \u003e Command see if a Windows Service is enabled: salt \"vCROCS01\" service.enabled \"spooler\" \u003e Results: vCROCS01: False Copy files to | Delete files from | Windows Server: \u003e Command Copy a file to a Windows Service - Source File | Destination File: salt \"vCROCS01\" cp.get_file \"salt://installer_file.msi\" \"C:\\install_files\\installer_file.msi\" \u003e Results: vCROCS01: C:\\install_files\\installer_file.msi \u003e Command Delete a file from a Windows Service: salt \"vCROCS01\" file.remove 'C:\\install_files\\installer_file.msi' \u003e Results: vCROCS01: True minion grain data: \u003e Command add grain data to a minion: salt \"vCROCS01\" grains.append azure_vm \"True\" vCROCS01: ---------- azure_vm: - True \u003e Command get grain custom data from a minion: salt \"vCROCS01\" grains.get azure_vm \u003e Results: vCROCS01: - True \u003e Command get grain os data from a minion: salt \"vCROCS01\" grains.get os \u003e Results: vCROCS01: Windows \u003e Command get grain os data from a minion: salt \"vCROCS01\" grains.get osfullname \u003e Results: vCROCS01: Microsoft Windows Server 2016 Datacenter \u003e Command get grain domain data from a minion: salt \"vCROCS01\" grains.get domain \u003e Results: vCROCS01: vcrocs.info \u003e Command get grain IP data from a minion: salt \"vCROCS01\" grains.get fqdn_ip4 \u003e Results: vCROCS01: - 192.168.99.99 \u003e Command sync minion grain data with salt master: salt \"vCROCS01\" saltutil.sync_grains \u003e Results: vCROCS01: PowerShell: \u003e Command run powershell command: salt \"vCROCS01\" cmd.run 'Get-Service | Where-Object {$_.Status -eq \"Running\"}' shell=PowerShell \u003e Results: vCROCS01: Status Name DisplayName ------ ---- ----------- Running AppHostSvc Application Host Helper Service Running BFE Base Filtering Engine Running BrokerInfrastru... Background Tasks Infrastructure Ser... Running CbDefense CB Defense Running CDPSvc Connected Devices Platform Service Running CertPropSvc Certificate Propagation Running COMSysApp COM+ System Application Running CoreMessagingRe... CoreMessaging \u003e C","date":"2022-03-06","objectID":"/hugo-loveit/saltstack-cheatsheet/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Grains"],"title":"VMware vRealize SaltStack Config cheat sheet for a Windows Server Admin","uri":"/hugo-loveit/saltstack-cheatsheet/"},{"categories":["VMware vExpert"],"content":"VMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022 VMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022 I am very proud to be part of the VMware vExpert program. This is the third year that I was accepted into the program. One part of the vExpert program that I think is great is that the program recognizes people for sharing their knowledge and “Giving Back”. A person selected into the vExpert programs is someone that likes to share, wants to make themselves and everyone around them smarter. 2022 is also the 2nd year that I was accepted into the VMware vExpert Cloud Management subprogram. I think that 2021 was one of my most productive years and one that I advanced my own personal knowledge the most. Highlights of 2021 to get accepted into the vExpert Program: VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware “vExpert Cloud Management Community” on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM “Right Sizing” I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Reference Interview that will be released in 2022. Link to Customer Reference I shared a vRealize Operations “Right Sizing” Dashboard on the code.vmware.com web site. What is the VMware vExpert Program? Program Overview The VMware vExpert program is VMware’s global evangelism and advocacy program. The program is designed to put VMware’s marketing resources towards your advocacy efforts. Promotion of your articles, exposure at our global events, co-op advertising, traffic analysis, and early access to beta programs and VMware’s roadmap. The awards are for individuals, not companies, and last for one year. Employees of both customers and partners can receive the awards. In the application, we consider various community activities from the previous year as well as the current year’s (only for 2nd half applications) activities in determining who gets awards. We look to see that not only were you active but are still active in the path you chose to apply for. Criteria If you are interested in becoming a vExpert the criteria is simple. We are looking for IT Professionals who are sharing their VMware knowledge and contributing that back to the community. The term “giving back” is defined as going above and beyond your day job. There are several ways to share your knowledge and engage with the community. Some of those activities are blogging, book authoring, magazine articles, CloudCred task writing, active in Facebook groups, forum (VMTN as well as other non VMware) platforms, public speaking, VMUG leadership, videos and so on. Thanks: I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser. Special Thanks to David Kruse for getting me started with vRA. Special Thanks to some past co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2). List of Bloggers that I follow and have learned a lot by them “Giving Back”: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf. Special Thanks to the person that gave me my first Job in IT: David Cornelius and anyone else that helped me in my journey called my career… I have learned a lot from the vCommunity. I want to use this blog as a way for me to “give back”. If one person finds anything I post helpful I will consider my efforts successful. I am always open","date":"2022-02-22","objectID":"/hugo-loveit/vexpert-2022/:0:0","tags":["VMware vExpert 2020 - 22","VMware vExpert Cloud Management 2021 - 22","vCommunity","Giving Back","VMware"],"title":"vExpert 2022 | vExpert Cloud Management","uri":"/hugo-loveit/vexpert-2022/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 8: Pouring the salt grains My previous posts about grain data were to show how to add minion grain data during the creation of a new server with vRA using PowerShell. This post I want to show how I’m going to maintain the grain data that is not default out of the box grain data. Windows Server grain data not available out of the of box that I want to add to every minion AND make sure the grain data stays up to date: Windows Server Features | Roles Windows Server Installed Software Windows Server Running Services These are the steps that I use to maintain custom grain data with a Windows Server: Create a PowerShell Script that can run locally on a minion. Add the script to the SaltStack Config File Manager. Use salt-call to run salt.functions locally on a minion. See screen shot and my code examples below. Create a SaltStack Config Job to execute the PowerShell Script remotely on the minion. See Screen Shot. Create a SaltStack Config Schedule to run the job that you create. The job can run every day, once a week, every 4 hours. Whatever makes sense for your use case. See Screen Shot. If you want to run a script locally on a minion and use salt functions that is where you use the salt-call command. After you learn the salt-functions and are logged into a Windows Server locally, you can still use salt commands by using salt-call. # --- example code salt-call --version salt-call test.ping # --- Show Disk Usage salt-call disk.usage # --- Show Installed Features|Roles salt-call win_servermanager.list_installed # --- Show Installed Sofwtare salt-call pkg.list_pkgs Link to salt-call Documentation Step 1 - Add script to SaltStack Config File Manager: See code examples below to add Windows Server Features|Roles, Installed Software, and Runnings Services as grain data. Click to see Larger Image Click to see Larger Image Step 3 - Create SaltStack Config Schedule: Click to see Larger Image Code Examples: - Add Windows Features | Roles as grain data: \u003c# .SYNOPSIS This Script is used to Get Windows Servers Features and add as Grain Data .DESCRIPTION Windows Servers Features .PARAMETER No Parameters .INPUTS No inputs .OUTPUTS salt grain data .NOTES Version: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLE N/A #\u003e # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Features Installed # --- Delete existing grains features data $saltCommand = 'salt-call grains.delkey sem_Windows_Feature force=True' #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand $saltCommand = 'salt-call win_servermanager.list_installed --output=json' #$saltCommand # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results $features = $results | ConvertFrom-Json #$features $features = $features.local #$features $features = $features -split(\":\") $features = $features -split(\";\") $features = $features -replace(\"@{\",\"\") $features = $features -replace(\"}\",\"\") $features = $features.trim() $features = $features -replace(\"=\",\" | \") $features = $features | Sort-Object #$features foreach($feature in $features){ # --- Grains Append $saltCommand = 'salt-call grains.append sem_Windows_Feature \"' + $feature + '\"' #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = 'salt-call grains.delkey sem_last_grains_update force=True' #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\"MM/dd/yyyy | hh:mm\") #$grainsupdateDate # --- Grains Append $saltCommand = 'salt-call grains.append sem_last_grains_update \"' + $grainsupdateDate + '\"' # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = 'salt-call saltutil.sync_grain","date":"2022-02-12","objectID":"/hugo-loveit/saltstack-config-part-08/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","grains"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 8","uri":"/hugo-loveit/saltstack-config-part-08/"},{"categories":["SaltStack Config","VMware Aria"],"content":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7 The more I use VMware vRealize SaltStack Config as a Windows Server Admin the more I see the importance of having grain information added to the minion to be able to target servers many different ways. During a recent discussion it was suggested to have the ability to target Windows Server minions by the Windows server Features|Roles that were installed on the server and by which software was installed on a server. There are built-in salt functions to get Features|Roles and installed software. Here is the code I used to get the information and add to the minion grain file using PowerShell. This will allow you to create targets to: minions with specific VMware Tools Versions minion with Web Server Feature|Role enabled etc… Salt Functions: # The POSH-SSH PowerShell module MUST be installed to use this code. # Name of Minion that you want to add grain data $minion = 'DBH-210' # ----- [ SSH Connection to SalStack Config Server ] ------------------------------------ Write-Host 'Making SSH Connection to SaltStack Config Server...' $Server = 'ssc.vCROCS.local' $userName = 'root' $Password = 'VMware#1' # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $Password -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword $Params = @{ \"ComputerName\" = $Server \"Credential\" = $creds } # End Params # SSH Connection to SaltStack Server $sshSession = Get-SSHSession if($sshSession.SessionId -eq 0){ Write-Host 'SSH Connection to SSC Server already completed' } # End If else{ Write-Host 'Creating new SSH Connection to SSC Server' New-SSHSession @Params } # End Else # ----- [ Start Adding Grain Data ] --------------------------------------------------------------------------- # ----- [ Minion Get Windows Server Features|Roles Installed ] ------------------------------------ Write-Host 'Getting Windows Server Features|Roles Installed...' $sshCommand = 'salt \"' + $minion + '\" win_servermanager.list_installed --output=json' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $features = $results.Output $features = $results.Output | ConvertFrom-Json $features = $features.PsObject.Properties.Value $features = $features | ConvertTo-Xml # Append Each Feature|Role information to grains Write-Host 'Appending Windows Server Features|Roles Installed to grains...' $grainsKey = 'vCROCS_Windows_Feature' foreach($feature in $features.Objects.Object.Property){ $grainsValue = $feature.Name + ' | ' + $feature.'#text' # Grains Append $sshCommand = 'salt \"' + $minion + '\" grains.append ' + $grainsKey + ' \"' + $grainsValue + '\"' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params Invoke-SSHCommand @Params } # End Foreach # ----- [ Minion Get Windows Server Installed Software ] ------------------------------------ Write-Host 'Getting Windows Server Installed Software...' # Get Installed Software $sshCommand = 'salt \"' + $minion + '\" pkg.list_pkgs --output=json' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $installedPackages = $results.Output $installedPackages = $installedPackages | ConvertFrom-Json $installedPackages = $installedPackages.PsObject.Properties.Value $installedPackages = $installedPackages | ConvertTo-Xml $grainsKey = 'vCROCS_Windows_Installed_Software' # Append Windows Server Installed Software to grains Write-Host 'Appending Windows Server Installed Software to grains...' foreach($installedPackage in $installedPackages.Objects.Object.Property){ $grainsValue = $installedPackage.Name + ' | ' + $installedPackage.'#text' # Grains Append $sshCommand = 'salt \"' + $minion + '\" grains.append ' + $grainsKey + ' \"' + $grainsValue + '\"' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Par","date":"2022-01-14","objectID":"/hugo-loveit/saltstack-config-part-07/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","POSH SSH"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7","uri":"/hugo-loveit/saltstack-config-part-07/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 6: How to use SaltStack Config with Windows Server and PowerShell The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin is going to be a lot PowerShell. I use PowerShell for a lot of Automation, Windows Server and Linux Server. When working with VMware vRealize SaltStack Config I constantly found myself going to the CLI to test and learn how the salt functions work. In the Part 5 Blog of this series I showed how I am using the PowerShell module POSH-SSH to connect to the VMware vRealize SaltStack Config Server to run salt commands remotely. So I started writing some PowerShell functions to run remote salt commands on the Salt Master. The end goal might be to turn this script into a Salt PowerShell Module. To start it will only have the functions that I find myself using the most. I could turn this into a community Github Project and see if there would be any interest. If anyone reading this blog post has any interest please reach out to me. (Dale.Hassinger@vCROCS.info) My goal is to make all these PowerShell Salt functions work with VMware vRealize SaltStack Config like PowerCLI works with VMware vCenter. Use same verb/noun terminology. I use PowerCLI for all my VMware Automation. Works awesome! So to create these PowerShell Functions to work with my existing automation scripts is a win win in my book. Normally I will use a Products APIs to do all these types of processes. I looked at VMware vRealize SaltStack Config APIs and to the best of my knowledge I can not use them like I can the PS functions that I created. That may change in a future release of VMware vRealize SaltStack Config. Fingers crossed. Salt PowerShell Functions: # ----- [ Start of Functions ] -------------------------------------------------------------------------------------------------------------- # The POSH-SSH PS module MUST be installed to use these functions. # Function to Connect to SSC Server function Connect-SSCServer { param( [parameter(mandatory = $true)] [string]$Server, [parameter(mandatory = $true)] [string]$userName, [parameter(mandatory = $true)] [string]$Password ) # End Parameters # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $global:HashiPW -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword $Params = @{ \"ComputerName\" = $Server \"Credential\" = $creds } # End Params # SSH Connection to SaltStack Server New-SSHSession @Params } # End Function # Function to Disconnect from SSC Server function Disconnect-SSCServer { Remove-SSHSession -SessionId 0 } # End Function # Sync Minion grains function invoke-SSC.sync.grains { param( [parameter(mandatory = $true)] [string]$minion ) # Sync Grains after adding new grain information $sshCommand = 'salt \"' + $minion + '\" saltutil.sync_grains --output=json' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params return $results.Output } # End Function # Minion Grain Append function set-SSC.grains.append { param( [parameter(mandatory = $true)] [string]$minion, [parameter(mandatory = $true)] [string]$grainkey, [parameter(mandatory = $true)] [string]$grainval ) # End Parameters # Grains Append $sshCommand = 'salt \"' + $minion + '\" grains.append \"' + $grainkey + '\" \"' + $grainval + '\"' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params } # End Function # Minion Grain DelKey function set-SSC.grains.delkey { param( [parameter(mandatory = $true)] [string]$minion, [parameter(mandatory = $true)] [string]$grainkey ) # End Parameters $sshCommand = 'salt \"' + $minion + '\" grains.delkey \"' + $grainkey + '\" force=True' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params } # End Function # Minion Test Ping function invoke-SSC.test.ping { param( [parameter(m","date":"2021-10-09","objectID":"/hugo-loveit/saltstack-config-part-06/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","POSH SSH"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 6","uri":"/hugo-loveit/saltstack-config-part-06/"},{"categories":null,"content":" about VMware TAM (Technical Account Manager) VMware vExpert 2020 - 2022 VMware vExpert Cloud Management 2021 - 2022 If you can script it, You can Automate it! Info The views and opinions expressed on this blog are my strictly my own and do not reflect the views and opinions of my employer. I Blog about Subjects and Products that I find interesting and will hopefully help someone get started on their Automation, Monitoring and Logging journey by providing some tips|tricks|processes|code needed. My current focus is Enterprise Automation | Monitoring and Logging. I have created an IaC (Infrastructure as Code) Environment. I am using VMware vRealize Automation and SaltStack Config to complete server builds, software installs, schedule VM snap shots, Microsoft 365 automation, Citrix Management, Automate Data Center Flips, Server Decommissions, and many other Day 2 processes… For monitoring I use vRealize Operations for the “Single Pane of Glass” experience. I also use vRealize Log Insight for logging and LCM (Life Cycle Manager) for installing all the vRealize Products. Almost all the code I write to complete the Automation that I create is done with PowerShell. The reason I choose to use PowerShell is because to do Automation with VMware products they have released their product PowerCLI, which is built on top of PowerShell. There hasn’t been anything that I wanted to Automate that I haven’t been able to do with PowerShell. To do remote Citrix management also works very well using PowerShell. I have also started to do Automation with Azure. I am using PowerShell to create VMs and SaltStack Config to complete the configuration management, install software and maintain state. Your thought process is the most powerful automation tool you’ll ever have! - Cody De Arkland vCommunity I have learned a lot from the vCommunity, Powershell and PowerCLI web sites. I want to use this blog as a way for me to give back. If one person finds anything I post helpful, I will consider my efforts successful. The code that I have shared I use with vRealize Automation Cloud Templates/Catalog Items and everyday VMware Admin functions. Everyday I learn something new. If I think it should be shared I will write a blog about it. Check back often to see what I am doing next. “It doesn’t make sense to hire smart people and then tell them what to do, We hire smart people so they can tell us what to do.” - Steve Jobs Thanks! I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser, Eric Pennente. Special Thanks to David Kruse for getting me started with vRA. Special Thanks to Vincent Riccio for allowing me to do SaltStack Config Presentations with you at VMworld 21 and SaltConf 21. Special Thanks to my first manager at VMware: Alex Musicante. You believed in me and my passion/skills/knowledge of the VMware Products. You gave me a career opportunity that no one else did. Special Thanks to some past and present co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2), Ryan Palmer, Megan Koss, Josh Demcher. Special Thanks to the person that gave me my first Job in IT: David Cornelius List of Bloggers that I follow and have learned a lot by them “Giving Back”: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf. and anyone else that helped me in my journey called my career… Experience VMware Aria VMware Aria Hub VMware Aria Graph VMware Aria Automation VMware Aria Automation Config VMware Aria Operations VMware Aria Operations for Logs VMware vSphere VMware vCenter vRealize Automation vRealize SaltStack Config vRealize Operations PowerShell PowerCLI vRealize Log Insight Windows Ser","date":"2022-12-30","objectID":"/hugo-loveit/about/:0:0","tags":null,"title":"Dale Hassinger","uri":"/hugo-loveit/about/"},{"categories":null,"content":"Favorite Links","date":"2022-12-30","objectID":"/hugo-loveit/links/","tags":null,"title":"Favorite Links","uri":"/hugo-loveit/links/"},{"categories":null,"content":" Links to some of my favorite Bloggers and Content: Bloggers: Brock Peterson - VMware Aria Operations Master LucD - PowerShell Master William Lam - VMware Master Yellow Bricks VMware: VMware Operations Management Book - Great Book! code.VMware.com - Samples/Resources Learn vRealize Automation Learn SaltStack Config blogs.VMware.com PowerShell PowerCLI VMware PowerCLI Cmdlets by Product vRealize Automation vRealize Operations vRealize Log Insight ports.VMware.com - Good Link when you live in a Zero trust environment Podcasts: Virtually Speaking Podcast The Hacks - Powered By SaltStack IT Reality Podcast ","date":"2022-12-30","objectID":"/hugo-loveit/links/:0:0","tags":null,"title":"Favorite Links","uri":"/hugo-loveit/links/"},{"categories":null,"content":" VMworld 2021 SaltConf 2021 Pat Gelsinger The Woz Belle Belle Belle Belle Belle Belle Belle Belle Belle and I Heaven Current Ride ","date":"2022-12-30","objectID":"/hugo-loveit/pics/:0:0","tags":null,"title":"Pics","uri":"/hugo-loveit/pics/"},{"categories":["SaltStack Config","VMware Aria"],"content":"description","date":"2021-10-01","objectID":"/hugo-loveit/saltstack-config-part-05/","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","grains","POSH-SSH","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 5","uri":"/hugo-loveit/saltstack-config-part-05/"},{"categories":["SaltStack Config","VMware Aria"],"content":" Part 5: How to use SaltStack Config with Windows Server and PowerShell The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be an update to some items that I have talked about in previous posts. I have been spending more time with VMware vRealize SaltStack Config and I have learned some better ways to do some of the processes that I have talked about already. My goal to to learn and use the built-in functions that are already in the product. I found that using the salt functions require less coding and better logging. First example of changing how I am going to use VMware vRealize SaltStack Config. When I first started looking at grains I thought I would edit the grains file with PowerShell and add the grains content to the file. What I did worked but I think I learned a better way. There is a function grains.append that will append grains data to the grains file on the minion. This works much better and when I run a job to add grains information it is listed in Activity Completed within VMware vRealize SaltStack Config. I like to be able to see when changes are made by the jobs that are run. The code that I have listed below to get vCenter TAGs assigned to a VM and add the information to the minion is using PowerShell. To use this script you MUST install the PowerShell Module POSH-SSH. The process I am showing connects to a vCenter, creates a SSH Connection to the Salt Server, gets all assigned vCenter TAGs for a VM, , runs salt commands to add grain information to the grains file of a minion, and then runs a minion grains sync. This concept can be used for a lot of different systems. If you want to add NSX-T Security TAGs as grain information (Thanks Karl Hauck for this idea), AD (Active Directory) OU of the Windows Server, or anything you think would be useful to Target minions within VMware vRealize SaltStack Config. I really like the idea of using POSH-SSH to make the SSH connection to the Salt Master Server and running commands. I do a lot of Automation within vRA (vRealize Automation) with PowerShell and I can use this same concept to use VMware vRealize SaltStack Config to complete the processes that need run. I can also create Catalog items within vRA that you can make available to APP Teams to use. The Catalog item could be running salt jobs in VMware vRealize SaltStack Config. Cool Stuff! Grains File: This is what I learned about salt grains when using with a Windows OS. The default location of the grains file is in directory “C:\\salt\\conf\". The grains file is named grains with no extension. Example grains file: NSXSecurityTAGs: - vCROCS.Apps.VMware.SaltStack.Minion vCenterTAGs: - TAG-VM-WebServer - TAG-VM-vCROCS - TAG-App-Hugo “Grain Name”: “The value of the grain”. In my example I wanted the grain to be named “vCenterTags” and the values will be the vCenter TAG names “TAG-VM-vCROCS, TAG-VM-WebServer, TAG-App-Hugo”. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs. I like the formatting that is used for the grains file by using the function grains.append. SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain “vCenterTags”. SaltStack Config Targets: Click Here to see Larger Image of Screen Shot SaltStack Config Target Definition: Click Here to see Larger Image of Screen Shot How to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config: Get the VM Names and All Assigned vCenter TAGs PowerShell Script: # ----- [ SSH SaltStack Config Server - Add vCenter TAGs to Minion Grains ] -------------------------- # Connect to vCenter before running this code # Define your Credentials # SSH to SaltStack Server - MUST HAVE POSH-SSH PowerShell Module Installed New-SSHSession -ComputerName 'SaltServer.vCROCS.info' # Test SSH Connection $CheckSSHConnection = Get-SSHSession -SessionId 0 $CheckSSHCo","date":"2021-10-01","objectID":"/hugo-loveit/saltstack-config-part-05/:0:0","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","grains","POSH-SSH","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 5","uri":"/hugo-loveit/saltstack-config-part-05/"},{"categories":["SaltStack Config","VMware Aria"],"content":"description","date":"2021-09-05","objectID":"/hugo-loveit/saltstack-config-part-04/","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","grains","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 4","uri":"/hugo-loveit/saltstack-config-part-04/"},{"categories":["SaltStack Config","VMware Aria"],"content":" Part 4: How to use SaltStack Config with Windows Server and PowerShell The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be salt grains. I have a specific use case that made me start looking at grains. In VMware vCenter I use vCenter TAGs to organize VMs. I also use vCenter TAGs to organize VMs in vRealize Operations. I want to use the same logic of using vCenter TAGs in SaltStack Config. SaltStack Config does not use vCenter TAGs OOTB (Out of the Box) for VMs. At the end of this Blog Post I also have an SaltStack Config Orchestration example. Instead of running multiple Jobs one at a time I have (4) steps in a SLS file that I run using a salt-run job and the function state.orchestrate. Grains File: This is what I learned about salt grains when using with a Windows OS. The default location of the grains file is in directory “C:\\salt\\conf\". The grains file is named grains with no extension. Example grains file: vCenterTags: TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo “Grain Name”: “The value of the grain”. In my example I wanted the grain to be named “vCenterTags” and the values will be the vCenter TAG names “TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo”. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs. SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain “vCenterTags”. SaltStack Config Targets: Click Here to see Larger Image of Screen Shot SaltStack Config Target Definition: Click Here to see Larger Image of Screen Shot How to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config: Step 1: Get the VM Names and All Assigned vCenter TAGs into a csv file Example PowerShell Code to get all vCenter VM Names and all vCenter TAGs assigned to the VMs # ----- [ Start Create CSV File with all VMs/TAGs Assigned ] ---------------------------- # I did not include code to connect to the vCenter. There are many ways to do this step. # Make sure you are connected to the vCenter BEFORE running this code. $allvmstaginfoFile = \"C:\\Salt\\allvmstaginfo.csv\" # Create Array $allVMsTagInfo = @(\"\") # Add Headers to Array $VMTagInfo = 'VM,TAGs' $allVMsTagInfo += $VMTagInfo # Get All VMs in you vCenter $vmNames = Get-VM $vmNames = $vmNames | Sort-Object Name foreach($vmName in $VMNames){ # Get VM Tag(s) $VMTags = Get-TagAssignment -Entity $vmName.Name # If more than (1) TAG I will join them as a string with a '|' separating the values. $VMtags = $VMTags.Tag.Name -join '|' # Create a string with the VMname and all the vCenter TAGs assigned separated by a comma $VMTagInfo = $vmName.Name + ',' + $VMTags # Add Info to array $allVMsTagInfo += $VMTagInfo } # End Foreach # Delete existing all VMs Tag csv File Remove-Item -Path $allvmstaginfoFile # Create new all VMs Tag csv File New-Item $allvmstaginfoFile -ItemType File # Add array Data to CSV file $allVMsTagInfo | Select-Object -Skip 1 | Set-Content $allvmstaginfoFile # ----- [ End Create CSV File with all VMs/TAGs Assigned ] ---------------------------- Step 2: Copy the csv file to the salt master After I create the csv file I copy to the StackStack Config Server (Salt Master) in the folder /var/srv/salt. This is where all files need to be saved when you use function cp.get_file. Step 3: Copy the csv file to the salt minions You may be wondering why I copy the file to the minion and not copy to a central share. My environment has NSX-T with zero trust. Most of my automation I do not open ports to servers that are not needed permanently. So the concept of using salt to copy files to minions, use the files to make changes and then delete the files when processes are complete works well in a zero trust environment. Job to copy csv file to minions: Click Here to see Larger Image of Screen Shot Step 4: Run Script on minion After I copy the csv file to the minion I run a scri","date":"2021-09-05","objectID":"/hugo-loveit/saltstack-config-part-04/:0:0","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","grains","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 4","uri":"/hugo-loveit/saltstack-config-part-04/"},{"categories":["SaltStack Config","VMware Aria"],"content":"description","date":"2021-08-27","objectID":"/hugo-loveit/saltstack-config-part-03/","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","beacons","reactors","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 3","uri":"/hugo-loveit/saltstack-config-part-03/"},{"categories":["SaltStack Config","VMware Aria"],"content":" Part 3: How to use SaltStack Config with Windows Server and PowerShell The next steps on my journey with **VMware vRealize SaltStack Config** as a **Windows Server Admin** will be beacons and reactors. Working with Jobs helped me understand how to make changes Ad-Hoc. I have a Job to quickly stop the Print Spooler but what if I always want the state of the Print Spooler Service to be stopped. How do I NOT allow a Server Admin to login into the server and manually start the service? This is where beacons and reactors work with minion configurations that you want to make permanent. This is the configuration Management Part of Salt Stack. To always make sure a Windows Service is stopped I created a beacon.conf file. On a Windows Server the Beacon.conf needs to be in the ‘C:\\salt\\conf\\minion.d' folder. Anytime a beacon.conf file is added to a minion or modified the salt-minion service needs restarted. I have a salt Job to restart the salt-minion service. Beacons: Beacon File: Sends events to the event bus on the salt master from a minion This beacon.conf example is for service state changes. The Beacon sends an event to the salt master if a Windows Service is started/stopped. beacons: service: - services: Spooler: onchangeonly: true This is what the event will look like in the events if you are monitoring. salt/beacon/DBH-211/service/Spooler { \"Spooler\": { \"running\": true }, \"_stamp\": \"2021-08-06T11:53:57.212810\", \"id\": \"DBH-211\", \"service_name\": \"Spooler\" } Reactors: Reactor File: Monitors the event bus for events specified. IE: salt/beacon/*/service/Spooler reactor: - 'salt/auth': # React to a new minion - salt://reactor/accept-key.sls # Run this state to auto accept new minion - 'salt/beacon/*/service/Spooler': # React to Spooler Service Change - salt://vCROCS/spooler_auto_stop.sls # Run this state How the beacons and reactors work together: # What this line is doing in the reactor is watching for an beacon event from any minion # The * means all minions. You could specify a minion name. # Looking for service events. # The service event that is specified is the Spooler event. - 'salt/beacon/*/service/Spooler' # This is the event sent from the beacon to the event bus salt/beacon/DBH-211/service/Spooler # What the reactor is looking for and what the beacon sent matches. # The state specified in the reactor will now run # This is the state specified in my example - salt://vCROCS/spooler_auto_stop.sls State File: State File: Stops the Spooler Service if it was started {% if data['Spooler']['running'] == true %} stop_service: local.service.stop: - tgt: {{ data['id'] }} - arg: - Spooler {% endif %} State File: Starts the Spooler Service if it was stopped {% if data['Spooler']['running'] == False %} start_service: local.service.start: - tgt: {{ data['id'] }} - arg: - Spooler {% endif %} Beacons: To copy the beacon file to the minions I created a Job that I can manually run. Job to copy a file to a minion: Click Here to see Larger Image of Screen Shot After the beacon file is copied to the minion you MUST restart the minion service. Job to restart minion service: Click Here to see Larger Image of Screen Shot Lessons Learned: Beacons are a good way to make sure the configuration you want is not altered. Beacons can monitor more than just services that I am showing in this blog post. I will cover more use cases in future blog posts. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack","date":"2021-08-27","objectID":"/hugo-loveit/saltstack-config-part-03/:0:0","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","beacons","reactors","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 3","uri":"/hugo-loveit/saltstack-config-part-03/"},{"categories":["SaltStack Config","VMware Aria"],"content":"description","date":"2021-08-05","objectID":"/hugo-loveit/saltstack-config-part-02/","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 2","uri":"/hugo-loveit/saltstack-config-part-02/"},{"categories":["SaltStack Config","VMware Aria"],"content":" Part 2: How to use SaltStack Config with Windows Server and PowerShell I have been able to spend more time with VMware vRealize SaltStack Config. Here are some updates on my journey with SaltStack as a Windows Server Admin. Auto-Accept new minions: I wanted new Windows Server builds (minions) to be auto accepted into SaltStack Config instead of someone manually approving new minions. To do this you need to have a reactor.conf file. I created the file in SaltStack Config File Server in base/reactor/reactor.conf (See Code below). You also need to create a reactor.conf file in /etc/salt/master.d on the salt master. I use vi to create and edit the reactor.conf file. Anytime you make changes to the /etc/salt/master.d/reactor.conf file you need to restart the salt-master service. In addition to the reactor file you need to create a state file. I located the file in /reactor/accept-key.sls (See Code below). I specified what the name of the new server starts with so that not all new minions get auto accepted. If the Naming Standard that I use is not what the new Server is named it will not be auto accepted. This is one way to have some rules on which new Servers are auto accepted. Reactor File: base/reactor/reactor.conf reactor: - 'salt/auth': # React to a new minion - salt://reactor/accept-key.sls # Run this state to auto accept new minion Location of the Reactor File: Click Here to see Larger Image of Screen Shot State File: base/reactor/accept-key.sls {% if 'act' in data and data['act'] == 'pend' and data['id'].startswith('DBH') %} minion_add: wheel.key.accept: - args: - match: {{ data['id']}} {% elif 'act' in data and data['act'] == 'pend' and data['id'].startswith('vCROCS') %} minion_add: wheel.key.accept: - args: - match: {{ data['id']}} {% endif %} Location of the State File: Click Here to see Larger Image of Screen Shot To restart the salt-master service run this command from the salt-master cli. service salt-master restart To check the status of the salt-master service run this command from the salt-master cli. systemctl status salt-minion.service Jobs: I think a good way to get Started with SaltStack Config after you have some minions added is to create some Jobs. You can create Jobs in the SaltStack Config UI. Go to Config/Jobs. You can manually run these Jobs on the minions. Here are some screen shots of jobs that can be useful. To run a job on a single minion go to minions and find the minion you want to run the job on, Select the minion, Select Run Job, Select the Job you want to run, select Run Now. If you select multiple minions the Job will run on all minions selected. That is where you start to see the True Power of Salt. If you Select one, ten, a hundred or a thousand minions, the time to complete the selected job is very quick. As a Windows Admin and using PowerShell, it would not be as easy to run a script on a 1,000 Servers at the exact same time. List of all the Jobs: Click Here to see Larger Image of Screen Shot Job to stop the Print Spooler Service: Click Here to see Larger Image of Screen Shot This job I am using a salt function service.stop. Pass the Service name as a argument. Job to stop the Print Spooler Service using a PowerShell Command: Click Here to see Larger Image of Screen Shot This job I am using a salt function cmd.run. Pass the PowerShell code and type of cmd as arguments. Job to stop and disable the Print Spooler Service using a PowerShell script: Click Here to see Larger Image of Screen Shot This job I am using a salt function cmd.script. Pass the PowerShell script path and type of cmd as arguments. Job to copy a file to a minion: Click Here to see Larger Image of Screen Shot This job I am using a salt function cp.get_file. Pass the file source path and destination path as arguments. Job to reboot a minion: Click Here to see Larger Image of Screen Shot This job I am using a salt function system.reboot. Pass the wait time to reboot and wait_for_reboot as arguments. If you noticed I have some j","date":"2021-08-05","objectID":"/hugo-loveit/saltstack-config-part-02/:0:0","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 2","uri":"/hugo-loveit/saltstack-config-part-02/"},{"categories":["SaltStack Config","VMware Aria"],"content":"description","date":"2021-07-16","objectID":"/hugo-loveit/saltstack-config-part-01/","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 1","uri":"/hugo-loveit/saltstack-config-part-01/"},{"categories":["SaltStack Config","VMware Aria"],"content":" Part 1: How to use SaltStack Config with Windows Server and PowerShell I have recently started looking at using VMware vRealize SaltStack Config. This blog is a work in progress on my journey with Salt. I started at **zero** and let's see what I discover as I work towards getting to PROD**. So if this topic is interesting to you, check back often. I wanted to learn one of the server configuration products that are available like Salt, Puppet, Chef, Ansible, etc… but I wasn’t sure which would be the best choice long term. When VMware purchased SaltStack Config the product to choose became a lot easier for me. SaltStack Config is included with vRealize Suite for licensing and I can call VMware support for help, SaltStack Config became the obvious product to pick. I like to show how to use VMware vRealize Products from a Windows Server Admin point of view. I do work with both Windows Servers and Linux Servers but most information you see online with Salt is using Linux Servers. I also do most of my current automation with PowerShell scripts. I do not want to lose all the time invested into the logic with my current PowerShell scripts. I am not going to go thru the process to install SaltStack Config. There is already some very good blogs written on installing SaltStack Config. One item I would recommend with installing Salt-Stack Config is to use VMware vRealize Life Cycle Manager (“LCM”). LCM makes the process to install SaltStack Config a lot easier. This Blog is assuming you already installed SaltStack Config, now how do I use salt and what do I use salt for. Installing and Configuring SaltStack Config The first step (minions): After you get a working SaltStack Config Server setup, the first item you need to do is add the salt agent to some “Test” servers. Servers that have the salt agent installed are called minions. There is the option to not add the salt agent to servers but then you need to use SSH to connect. Windows Servers do not have SSH available as default so you would need to install an SSH server like OpenSSH on your servers. My thoughts are I need to add something for the minions to communicate with the salt-master. Instead of adding OpenSSH to every Windows Server I chose to install and use the salt agent. For testing you can manually install the minion agent on a server to become familiar with how the salt commands work. During the install there are two values you need to enter. The name of the master and the name you want to use for the minion. I did that on my first couple test servers but then I created some PowerShell code to install the salt minion agent. # ----- [ Install minion ] ----------------------------------------------- # Define Username/Password $username = 'username@vCROCS.info' # The next line is how to create the encrypted password # Read-Host -Prompt \"Enter your password - username\" -AsSecureString | ConvertFrom-SecureString | Out-File \"C:\\PWkey\\username.key\" $password = Get-Content \"C:\\PWkey\\username.key\" | ConvertTo-SecureString $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password # ----- [ This section connects you to vCenter where VM is located ] ----- # Connect to vCenter vCenterName = 'vCenter.vCROCS.info' Connect-VIServer $vCenterName -Credential $cred # ----- [ Install Salt Agent ] ------------------------------------------- # Name of Server to install the salt minion agent $vmName = 'DBH-217' # Copy the minion agent file to your windows server Copy-VMGuestFile -Source G:\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe -Destination 'C:\\vCROCS' -VM $vmName -LocalToGuest -GuestCredential $cred # command string to install the Salt Minion Agent $PSText = 'C:\\vCROCS\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe /S /master=salt /minion-name=' + $vmName # Run the command on remote Server Invoke-VMScript -VM $VMName -ScriptType bat -ScriptText $PSText -GuestCredential $cred After the minion agent is installed on your server you need to accept the key o","date":"2021-07-16","objectID":"/hugo-loveit/saltstack-config-part-01/:0:0","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","VMware Aria"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 1","uri":"/hugo-loveit/saltstack-config-part-01/"}]